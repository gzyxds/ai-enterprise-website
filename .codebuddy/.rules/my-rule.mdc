---
description: 
globs:
alwaysApply: true
---
# 艺创AI企业网站项目规则

## 1. 代码规范
### 1.1 命名规范
- **文件命名**：使用小写字母和连字符（kebab-case），例如：`feature-card.tsx`
- **组件命名**：使用大驼峰命名法（PascalCase），例如：`FeatureCard`
- **函数命名**：使用小驼峰命名法（camelCase），例如：`handleSubmit`
- **常量命名**：使用大写字母和下划线，例如：`MAX_RETRY_COUNT`
- **CSS类名**：使用小写字母和连字符，遵循Tailwind CSS约定

### 1.2 代码格式
- 使用ESLint和Prettier进行代码格式化
- 缩进使用2个空格
- 每行代码不超过100个字符
- 文件末尾保留一个空行
- 使用分号结束语句

### 1.3 注释规范
- 组件顶部添加组件说明注释
- 复杂逻辑需添加详细注释
- 使用JSDoc风格为函数添加参数和返回值说明
- 临时代码使用TODO:标记

## 2. 项目结构规范
### 2.1 目录组织
- 严格遵循README中定义的项目结构：
  ```
  ai-enterprise-website/
  ├── public/              # 静态资源
  ├── src/                 # 源代码
  │   ├── app/             # 页面组件
  │   ├── components/      # 可复用组件
  │   ├── hooks/           # 自定义Hooks
  │   ├── lib/             # 工具函数和库
  │   ├── App.tsx          # 应用入口
  │   └── main.tsx         # 渲染入口
  ```
- 新功能模块在对应目录下创建子目录
- 共享组件放在components目录
- 页面组件放在app目录
- 工具函数放在lib目录
- 自定义Hook放在hooks目录

### 2.2 导入顺序
- React相关导入
- 第三方库导入
- 自定义组件导入
- 工具函数和Hook导入
- 样式导入

## 3. 组件开发规范
### 3.1 组件设计
- 遵循单一职责原则，一个组件只负责一个功能
- 组件应具有良好的可复用性
- 使用TypeScript定义明确的Props接口
- 避免过度嵌套组件
- 组件文件不应超过300行，超过时考虑拆分

### 3.2 状态管理
- 本地状态使用useState和useReducer
- 跨组件状态考虑使用Context API
- 避免prop drilling（属性透传）超过3层

### 3.3 性能优化
- 使用React.memo避免不必要的重渲染
- 使用useCallback和useMemo优化性能
- 实现代码分割和懒加载
- 图片资源进行适当压缩和优化

## 4. 样式开发规范
### 4.1 Tailwind CSS使用
- 优先使用Tailwind提供的工具类
- 遵循移动优先（Mobile First）的响应式设计原则
- 自定义样式在tailwind.config.ts中扩展
- 避免内联样式，除非是动态计算的样式

### 4.2 主题设计
- 使用统一的颜色变量，在tailwind.config.ts中定义
- 定义明确的间距、字体大小和圆角系统
- 保持设计的一致性

## 5. 版本控制规范
### 5.1 Git工作流
- 采用Feature Branch工作流
- 主分支为main，开发分支为dev
- 功能开发在feature/功能名分支进行
- 修复bug在fix/bug描述分支进行

### 5.2 提交信息规范
- 使用Angular提交规范
- 格式：`<type>(<scope>): <subject>`
- 类型包括：feat, fix, docs, style, refactor, perf, test, chore
- 示例：`feat(product): 添加产品详情页面`

## 6. 测试规范
### 6.1 测试覆盖
- 核心组件需编写单元测试
- 关键页面需编写集成测试
- 测试文件与源文件放在同一目录，命名为*.test.tsx

### 6.2 测试工具
- 使用Jest作为测试框架
- 使用React Testing Library进行组件测试
- 使用Mock Service Worker模拟API请求

## 7. 文档规范
### 7.1 代码文档
- 每个组件需提供使用示例
- 复杂组件需提供Props文档
- 自定义Hook需提供使用说明

### 7.2 项目文档
- README.md保持更新
- 提供CHANGELOG.md记录版本变更
- 提供CONTRIBUTING.md说明贡献指南

## 8. 安全规范
### 8.1 前端安全
- 防止XSS攻击，处理用户输入
- 避免在前端存储敏感信息
- 使用HTTPS协议
- 实施适当的CORS策略

## 9. 性能规范
### 9.1 加载性能
- 首屏加载时间控制在3秒以内
- 使用图片懒加载
- 实施资源预加载策略
- 优化关键渲染路径

### 9.2 运行性能
- 避免不必要的重渲染
- 优化长列表渲染（虚拟滚动）
- 减少主线程阻塞

## 10. 协作规范
### 10.1 团队协作
- 定期代码审查
- 遵循约定的开发流程
- 重要功能变更需团队讨论
- 保持良好的沟通和文档更新

### 10.2 发布流程
- 遵循语义化版本（Semantic Versioning）
- 每次发布前进行完整测试
- 维护更新日志
- 制定回滚策略

## 11. 国际化与本地化
### 11.1 多语言支持
- 使用i18n解决方案
- 文本内容使用键值对管理，避免硬编码
- 考虑不同语言的文本长度差异

## 12. 无障碍性
### 12.1 无障碍标准
- 遵循WCAG 2.1标准
- 确保键盘可访问性
- 提供适当的ARIA属性
- 确保足够的颜色对比度

## 13. 项目特定规范
### 13.1 产品页面规范
- 每个产品页面必须包含：产品概述、核心功能、技术特点、应用场景、客户案例、常见问题
- 产品页面路径统一为`/products/{product-name}`
- 产品图片统一存放在`public/images/products/{product-name}/`目录

### 13.2 组件复用规范
- 页面级组件放在`src/app`目录下
- UI基础组件放在`src/components/ui`目录下
- 业务组件放在`src/components`目录下
- 共享布局组件（如Header、Footer）直接放在`src/components`目录下

### 13.3 路由管理规范
- 路由配置统一在`src/App.tsx`中管理
- 使用React Router v6的声明式路由
- 嵌套路由应当遵循目录结构
- 404页面应当提供友好的用户体验和返回首页的链接

### 13.4 动画效果规范
- 使用Framer Motion实现页面过渡和元素动画
- 动画效果应当适度，不影响用户体验
- 考虑用户的减少动画偏好设置（prefers-reduced-motion）

### 13.5 响应式设计规范
- 使用Tailwind的响应式前缀（sm:, md:, lg:, xl:, 2xl:）
- 移动端优先设计，从小屏幕开始适配
- 关键断点：
  - sm: 640px
  - md: 768px
  - lg: 1024px
  - xl: 1280px
  - 2xl: 1536px